#!/bin/bash
#
# Custom easybuild wrapper script for CCR. This script assumes you've already
# sourced CCR's bash environment scripts and wraps the eb command to setup the
# necessary environment variables for building software for use in CCR's
# software layer.
#
# EasyBuild can be configured via environment variables or configuration files.
# We use both, see config/easybuild/config.cfg in this repo for additional
# settings. The reason for using both environment variables (in this file) and
# config settings (in config.cfg) is that sometimes we want to configure
# easybuild dynamically based on certain logic. We can do this easily in this
# bash script. For other settings that are more static we can just set them in
# config.cfg. 
#
# For deatiled docs on configuring EasyBuild see:
# https://docs.easybuild.io/en/latest/Configuration.html#available-configuration-settings

# First create a temporary work directory for all easybuilds.
# here we honor $TMPDIR if it is already defined, or /tmp otherwise
if [ -z $TMPDIR ]; then
    export WORKDIR=/var/tmp/$USER
else
    export WORKDIR=$TMPDIR/$USER
fi

# avoid that pyc files for EasyBuild are stored in EasyBuild installation directory
export PYTHONPYCACHEPREFIX=${WORKDIR}/pycache
export EASYBUILD_PREFIX=${WORKDIR}/easybuild
export EASYBUILD_SOURCEPATH=${WORKDIR}/easybuild/sources:${CCR_SOURCEPATH}

if [[ -d /srv/software-layer ]]; then
    # Detect when building inside container and set install path to CVMFS
    export EASYBUILD_INSTALLPATH=${CCR_EASYBUILD_PATH}
else
    # By default we assume user is building so set default install path to home
    # directory. Users can override this by setting the CCR_BUILD_PREFIX env var
    if [[ -z "$CCR_BUILD_PREFIX" ]]; then
        if [ "$CCR_VERSION" = "2023.01" ]; then
            export EASYBUILD_INSTALLPATH=${HOME}/.local/easybuild/${CCR_VERSION}
        else
            export EASYBUILD_INSTALLPATH=${HOME}/.local/easybuild/${CCR_VERSION}/${CCR_CPU_FAMILY}
        fi
    else
        if [ "$CCR_VERSION" = "2023.01" ]; then
            export EASYBUILD_INSTALLPATH=${CCR_BUILD_PREFIX}/${CCR_VERSION}
        else
            export EASYBUILD_INSTALLPATH=${CCR_BUILD_PREFIX}/${CCR_VERSION}/${CCR_CPU_FAMILY}
        fi
    fi

    # This ensures existing modules get picked up and not rebuilt when
    # performing robot builds
    module use ${CCR_EASYBUILD_PATH}/modules
fi

export EASYBUILD_DEBUG=${EASYBUILD_DEBUG:-1}
export EASYBUILD_TRACE=${EASYBUILD_TRACE:-1}
export EASYBUILD_ZIP_LOGS=${EASYBUILD_ZIP_LOGS:-bzip2}

# Path to our custom EasyBuild config settings file
export EASYBUILD_CONFIGFILES=${CCR_INIT_DIR}/easybuild/${CCR_VERSION}/config.cfg

# Path to CCR custom easyblocks and easyconfig recipe files
export EASYBUILD_ROBOT_PATHS=${CCR_INIT_DIR}/easybuild/easyconfigs:$EASYBUILD_ROBOT_PATHS
export EASYBUILD_INCLUDE_EASYBLOCKS="${CCR_INIT_DIR}/easybuild/easyblocks/*.py"

# Set custom Hierarchical module naming scheme. For details see here:
# https://easybuilders.github.io/easybuild-tutorial/2021-lust/module_naming_schemes/
# https://easybuild.io/files/hust14_paper.pdf
export EASYBUILD_INCLUDE_MODULE_NAMING_SCHEMES=${CCR_INIT_DIR}/easybuild/CCRHierarchicalMNS.py
export EASYBUILD_MODULE_NAMING_SCHEME=CCRHierarchicalMNS

export EASYBUILD_SUFFIX_MODULES_PATH=""
export EASYBUILD_ALLOW_LOADED_MODULES=StdEnv,ccrsoft,gentoo,easybuild

# just ignore OS dependencies for now, see https://github.com/easybuilders/easybuild-framework/issues/3430
export EASYBUILD_IGNORE_OSDEPS=1

# Set sysroot to gentoo prefix compat layer
export EASYBUILD_SYSROOT=${EPREFIX}

export EASYBUILD_RPATH=1
export EASYBUILD_MODULE_EXTENSIONS=1

# Custom CCR easybuild hooks
export EASYBUILD_HOOKS=${CCR_INIT_DIR}/easybuild/${CCR_VERSION}/eb_hooks.py

# Here we set compiler optimization flags based on supported CCR_ARCH types
# See: https://docs.easybuild.io/en/latest/Controlling_compiler_optimization_flags.html
if [ "$CCR_ARCH" = "avx2" ]; then
    export EASYBUILD_OPTARCH='NVHPC:tp=haswell;Intel:march=core-avx2 -axCore-AVX512;GCC:march=core-avx2'
elif [ "$CCR_ARCH" = "avx512" ]; then
    export EASYBUILD_OPTARCH='NVHPC:tp=skylake;Intel:xCore-AVX512;GCC:march=skylake-avx512'
elif [ "$CCR_ARCH" = "x86-64-v3" ]; then
    export EASYBUILD_OPTARCH='NVHPC:march=x86-64-v3;Intel:march=core-avx2 -axCore-AVX512;GCC:march=x86-64-v3'
elif [ "$CCR_ARCH" = "x86-64-v4" ]; then
    export EASYBUILD_OPTARCH='NVHPC:march=x86-64-v4;Intel:march=skylake-avx512;GCC:march=x86-64-v4'
elif [ "$CCR_ARCH" = "neoverse-v2" ]; then
    export EASYBUILD_OPTARCH='GCC:mcpu=neoverse-v2'
else
    echo -e "\e[31mERROR: invalid microarchitecture detected: CCR_ARCH=$CCR_ARCH \e[0m" >&2
    exit 1
fi

# Exec the currently loaded easybuild version
exec ${EBROOTEASYBUILD}/bin/eb ${1+"$@"}
